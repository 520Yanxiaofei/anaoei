1，下载xshell

2，创建远程对话服务

3，输入ssh相关账户 
IP:101.132.144.219(公)
端口：22
帐号：guochao
密码：aCBCYxk9YqpsS8ab

4，创建成功后，查看cd .. 到最顶层

5，ll -a 所有目录(也可以用ls -a)

6，要将node部署服务器(文件夹通常用来存放软件源代码)，放到cd /usr/local/src(前面要加上/，不然会自动识别相同路径，导致目录不同)

7，安装node前，检查BASH_VERSINFO服务器环境及多少位的（64,86），来安装所需的node环境版本（用set查看所有配置及环境变量）

8，下载nodejs代码，也可以使用scp命令直接上传，因为下载实在太慢了。（将本地node软件部署上去）两种方案
a,本地上传，sz file文件名
b,服务器安装 wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz

另外rz是上传所有文件的意思

文件有问题想更换，就rm 文件名进行删除
删除文件夹带上-rf  如：rm -rf 文件夹名称

9，进行解压tar -xzvf node-v0.12.5.tar.xz（参考自己的最新版本）
如解压失败，确认是什么格式文件，tar.xz的需要先xz -d node文件名进行解压
然后tar xvf node-v6.9.5-linux-x64.tar.xz解压完成
若是tar.gz的用tar -xzvf 解压名称

解压后查看ll

关于压缩文件解释
压缩文件  tar -czvf ***.tar.gz
解压文件  tar -xzvf ***.tar.gz


tar –xvf file.tar //解压 tar包
tar -xzvf file.tar.gz //解压tar.gz
tar -xjvf file.tar.bz2 //解压 tar.bz2
tar –xZvf file.tar.Z //解压tar.Z
unrar e file.rar //解压rar
unzip file.zip //解压zip


10，

如果是在root目录下时
创建软链接，使node和npm命令全局有效。通过创建软链接的方法，使得在任意目录下都可以直接使用node和npm命令
ln是创建相同的目录源连接，然后将解压路径的bin/node设置到/usr/local/bin下
意思就是将node命令修改为全局（相当于windows的设置Path环境变量）

ln -s /root/node-v6.9.5-linux-x64/bin/node /usr/local/bin/node
ln -s /root/node-v6.9.5-linux-x64/bin/npm /usr/local/bin/npm
现在，任意目录可以运行了，检查是否安装成功，node -v查看

11，部署node项目，首先打包项目tar，rz部署压缩文件上传，成功后进行解压到当前目录
a,指定目录带/，是绝对路径
b,带-C
c,带--directory
tar zxvf anaoei-node-api.tar.gz -C anaoei-node-api（指定的目录文件夹）

12，进入项目目录后，进行npm install 安装，配置数据库，启动服务，如公网ip:3000

数据库1
 mysql: {
        host: '101.132.144.219',
        user: 'root',
        password: 'pigge',
        port: '3306',
        database: 'anaoei_admin'
    }


我的数据库2
mysql: {
        host: 'bdm294739102.my3w.com',
        user: 'bdm294739102',
        password: 'bdm294739102',
        port: '3306',
        database: 'bdm294739102_db',
        insecureAuth: true
    }


13，如遇到访问失败，检查mysql是否安装，或者node-mysql。然后进行访问

vi操作
vi 文件名称（编辑）
：wq (保存编辑)
：q!（撤销编辑）
cat 文件名称（查看文件）


14，对数据库进行管理，后台管理系统地址进入
http://bxu2713730129.my3w.com/public/admin/


15，自动化部署
在当前目录创建
#!/bin/sh
touch push.sh
chmod +x push.sh
vim push.sh
如
git reset --hard origin/master
git clean -f
git pull origin master
npm install
pm2 start ./bin/www -name anaoei-node-api
echo 嗨，anaoei,自动化部署成功！
保存后
输入./push/sh

完结

小程序发布时，接口必须是域名不加端口，要配置真实域名才能访问，认证ssl，带https。

使用NVM安装多版本

NVM（Node version manager）是Node.js的版本管理软件，使用户可以轻松在Node.js各个版本间进行切换。适用于长期做 node 开发的人员或有快速更新node版本、快速切换node版本这一需求的用户。

安装步骤：

直接使用git将源码克隆到本地的~/.nvm目录下，并检查最新版本。

yum install git
git clone https://github.com/cnpm/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`
激活NVM。

echo ". ~/.nvm/nvm.sh" >> /etc/profile
source /etc/profile
列出Node.js的所有版本。

nvm list-remote
安装多个Node.js版本。

nvm install v6.9.5
nvm install v7.4.0
运行 nvm ls 查看已安装Node.js版本，当前使用的版本为v6.9.5。返回结果如下所示。

[root@iZXXXXZ .nvm]# nvm ls
      v6.9.5
->       v7.4.0
      system
stable -> 7.4 (-> v7.4.0) (default)
unstable -> 6.9 (-> v6.9.5) (default)
运行 nvm use v7.4.0 切换Node.js版本至v7.4.0。返回结果如下所示。

[root@iZXXXXZ .nvm]# nvm use v7.4.0
Now using node v7.4.0




node开发自动更新代码服务
npm install -g nodemon 
注意，有可能没启动到自己的服务
在项目根目录下package.json加上一行"dev":"./node_modules/.bin/nodemon bin/www"
启动npm run dev即可
注意：ln -s /usr/local/src/node-v8.9.4-linux-x64/bin/nodemon /usr/local/bin/nodemon
加入到全局变量中


使用 pm2-web 监控 pm2 服务运行状态
pm2-web 是一款 pm2 服务状态监控程序，基于 web 。

安装

$ npm install -g pm2-web

运行(默认是在8080端口)

$ pm2-web

配置

pm2-web 将会加载默认的配置文件（如果存在） 
pm2-web will load one of the following files if they exist (in order of preference)

A file specified by the --config /path/to/config.json argument
From the current users' home directory: ~/.config/pm2-web/config.json
A global configuration file: /etc/pm2-web/config.json自定义配置文件 
通过 --config yourFile 指定加载的配置文件 
新建 pm2-web-config.json 文件:
{
    "www": {
        "host": "localhost",
        "address": "0.0.0.0",
        "port": 10016
    }                         
}

运行 pm2-web: 
$pm2-web --config pm2-web-config.json
访问 localhost:10016
可以在 web 界面查看 pm2 服务运行状态，点击按钮进行 stop restart reload 等操作。



是不是很神奇，接下来把pm2加入系统启动中。
[root@localhost www]# pm2 startup centos
[PM2] Generating system init script in /etc/init.d/pm2-init.sh
[PM2] Making script booting at startup...
[PM2] /var/lock/subsys/pm2-init.sh lockfile has been added
[PM2] -centos- Using the command:
      su -c "chmod +x /etc/init.d/pm2-init.sh; chkconfig --add pm2-init.sh"

[PM2] Done.
[root@localhost www]# pm2 save
[PM2] Dumping processes
要保存一下！



使用 PM2 管理nodejs进程
pm2 是一个带有负载均衡功能的Node应用的进程管理器.

当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。

它非常适合IaaS结构，但不要把它用于PaaS方案（随后将开发Paas的解决方案）.

 

和使用node index.js方式比较，优点：

1 一个命令窗口就可管理多个node服务器进程。而node命令多个进程就需要开多个窗口。

2 关闭命令窗口，node进程仍然会运行。而node命令运行的关闭窗口后，进程也就关闭了。
安装
npm install -g pm2
注意，要启动时，必须指定路径，如pm2 start ./bin/www --watch
用法
$ npm install pm2 -g     # 命令行安装 pm2 
$ pm2 start app.js -i 4 #后台运行pm2，启动4个app.js 
                                # 也可以把'max' 参数传递给 start
                                # 正确的进程数目依赖于Cpu的核心数目
$ pm2 start app.js --name my-api # 命名进程
$ pm2 list               # 显示所有进程状态
$ pm2 monit              # 监视所有进程
$ pm2 logs               #  显示所有进程日志
$ pm2 stop all           # 停止所有进程
$ pm2 restart all        # 重启所有进程
$ pm2 reload all         # 0秒停机重载进程 (用于 NETWORKED 进程)
$ pm2 stop 0             # 停止指定的进程
$ pm2 restart 0          # 重启指定的进程
$ pm2 startup            # 产生 init 脚本 保持进程活着
$ pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)
$ pm2 delete 0           # 杀死指定的进程
$ pm2 delete all         # 杀死全部进程

运行进程的不同方式：
$ pm2 start app.js -i max  # 根据有效CPU数目启动最大进程数目
$ pm2 start app.js -i 3      # 启动3个进程
$ pm2 start app.js -x        #用fork模式启动 app.js 而不是使用 cluster
$ pm2 start app.js -x -- -a 23   # 用fork模式启动 app.js 并且传递参数 (-a 23)
$ pm2 start app.js --name serverone  # 启动一个进程并把它命名为 serverone
$ pm2 stop serverone       # 停止 serverone 进程
$ pm2 start app.json        # 启动进程, 在 app.json里设置选项
$ pm2 start app.js -i max -- -a 23                   #在--之后给 app.js 传递参数
$ pm2 start app.js -i max -e err.log -o out.log  # 启动 并 生成一个配置文件
你也可以执行用其他语言编写的app  ( fork 模式):
$ pm2 start my-bash-script.sh    -x --interpreter bash
$ pm2 start my-python-script.py -x --interpreter python

0秒停机重载:
这项功能允许你重新载入代码而不用失去请求连接。
注意：
仅能用于web应用
运行于Node 0.11.x版本
运行于 cluster 模式（默认模式）
$ pm2 reload all

CoffeeScript:
$ pm2 start my_app.coffee  #这就是全部

PM2准备好为产品级服务了吗？
只需在你的服务器上测试
$ git clone https://github.com/Unitech/pm2.git
$ cd pm2
$ npm install  # 或者 npm install --dev ，如果devDependencies 没有安装
$ npm test



查看环境变量
echo $PATH